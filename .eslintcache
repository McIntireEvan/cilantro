[{"/home/evan/src/cilantro/src/index.tsx":"1","/home/evan/src/cilantro/src/App.tsx":"2","/home/evan/src/cilantro/src/pages/RecipeView.tsx":"3","/home/evan/src/cilantro/src/pages/CookbookView.tsx":"4","/home/evan/src/cilantro/src/pages/SettingsView.tsx":"5","/home/evan/src/cilantro/src/pages/SearchView.tsx":"6","/home/evan/src/cilantro/src/Settings.ts":"7","/home/evan/src/cilantro/src/components/Sidebar.tsx":"8","/home/evan/src/cilantro/src/pages/TagsView.tsx":"9"},{"size":216,"mtime":1609380311910,"results":"10","hashOfConfig":"11"},{"size":4455,"mtime":1609450597230,"results":"12","hashOfConfig":"11"},{"size":2782,"mtime":1609447987030,"results":"13","hashOfConfig":"11"},{"size":710,"mtime":1609380311910,"results":"14","hashOfConfig":"11"},{"size":2886,"mtime":1609450654930,"results":"15","hashOfConfig":"11"},{"size":1161,"mtime":1609452653850,"results":"16","hashOfConfig":"11"},{"size":756,"mtime":1609447804620,"results":"17","hashOfConfig":"11"},{"size":1431,"mtime":1609448628770,"results":"18","hashOfConfig":"11"},{"size":829,"mtime":1609452615180,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"1gpdzn0",{"filePath":"23","messages":"24","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25","usedDeprecatedRules":"22"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"/home/evan/src/cilantro/src/index.tsx",[],["41","42"],"/home/evan/src/cilantro/src/App.tsx",["43"],"import React, { useEffect, useState } from 'react';\n\nimport matter from 'gray-matter'\n\nimport './App.css';\nimport { RecipeWrapper } from './pages/RecipeView';\nimport CookbookView from './pages/CookbookView';\n\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n} from \"react-router-dom\";\nimport { CookbookData, Recipe } from './models';\nimport SettingsView from './pages/SettingsView';\nimport { SearchView } from './pages/SearchView';\nimport { AppSettings, SettingsContext } from './Settings';\nimport Sidebar from './components/Sidebar';\nimport { TagCloudView, TagPageWrapper } from './pages/TagsView';\n\nfunction parseChowdownMd(id: number, data: string): Recipe {\n  const parsed = matter(data)\n  console.log(parsed)\n\n  const title = parsed.data.title;\n  const tags = parsed.data.tags.split(\",\").map((t: string) => t.trim());\n  const imgUrl = parsed.data.image;\n  const steps = parsed.data.directions;\n  const ingredients = parsed.data.ingredients.map((s: string) => {\n    // want to look for \"N\" or \"N/M\" or \"N and M\" or \"N or M\"\n    return {amount: \"\", item: s}\n  });\n  const serves = parsed.data.yield;\n  const time = parsed.data.time;\n  const sourceURL = parsed.data.source;\n\n  return {\n    id,\n    title,\n    tags,\n    imgUrl,\n    steps,\n    serves,\n    sourceURL,\n    time,\n    ingredients,\n    bodyText: parsed.content\n  }\n\n}\n\nfunction makeTagGroups(recipes: Recipe[]): {[tag: string]: Recipe[]} {\n  const mapping: {[tag: string]: Recipe[]} = {};\n  for (const r of recipes) {\n    for (const t of r.tags) {\n      if (!(t in mapping)) {\n        mapping[t] = [];\n      }\n      mapping[t].push(r)\n    }\n  }\n\n  return mapping\n}\n\nconst loc = window.location.host; \n\nexport default function App() {\n  const [cookbook, setCookbook] = useState<CookbookData>();\n  const [tagIndex, setTagIndex] = useState<{[tag: string]: Recipe[]}>({});\n  const [settings, setSettings] = useState<AppSettings>({\n    dataRootURL: \"http://localhost:3000/recipes/\", indexFile: \"README.md\", theme: \"light\", sidebarCompact: true,\n  });\n  console.log(loc);\n\n // TODO: This is really bad, but it works.\n  // Fix this when I better understand async again. I wish it was as easy as go.\n  useEffect(() => {\n    async function load() {\n      const resp = await fetch(settings.dataRootURL + settings.indexFile)\n      const data = await resp.text()\n\n      const parsed = matter(data)\n\n      const recipes = parsed.data.recipes.map(async (name: string, i: number) => {\n        const recipeResp = await fetch(settings.dataRootURL + \"recipes/\" + name + \".md\")\n        const recipeData = await recipeResp.text()\n        return parseChowdownMd(i, recipeData);\n      });\n\n      Promise.all(recipes).then((rs: any) => {\n        const book = {\n          title: parsed.data.title,\n          body: parsed.content,\n          recipes: rs\n        }\n        setCookbook(book);\n      });\n    }\n    \n    load();\n  }, []);\n\n  useEffect(() => {\n    if (cookbook) {\n      const i = makeTagGroups(cookbook.recipes);\n      setTagIndex(i);\n    }\n  }, [cookbook]);\n\n  if (settings.dataRootURL === \"\") {\n    return <div />\n  } else if (settings.indexFile === \"\") {\n    return <div />\n  } \n\n  if (cookbook === undefined) {\n    return <div>Loading...</div>\n  }\n\n  function updateTheme(theme: string) {\n    console.log(theme);\n    setSettings({...settings, theme})\n  }\n\n  function updateCompact(sidebarCompact: boolean) {\n    setSettings({...settings, sidebarCompact})\n  }\n\n  return (\n    <SettingsContext.Provider value={settings}>\n      <Router>\n        <div className={\"app app-theme-\" + settings.theme}>\n          <Sidebar />\n          <main className=\"app-content\">\n            <Switch>\n              <Route path=\"/r/:id\">\n                <RecipeWrapper recipes={cookbook.recipes}/>\n              </Route>\n              <Route path=\"/tags/:tag\">\n                <TagPageWrapper index={tagIndex}/>\n              </Route>\n              <Route path=\"/tags/\">\n                <TagCloudView index={tagIndex} />\n              </Route>\n              <Route path=\"/search/\">\n                <SearchView recipes={cookbook.recipes}/>\n              </Route>\n              <Route path=\"/settings/\">\n                <SettingsView onUpdate={updateTheme} updateCompact={updateCompact} />\n              </Route>\n              <Route path=\"/\">\n                <CookbookView {...cookbook} />\n              </Route>\n            </Switch>\n          </main>\n        </div>\n      </Router>\n    </SettingsContext.Provider>\n  );\n}\n","/home/evan/src/cilantro/src/pages/RecipeView.tsx",[],"/home/evan/src/cilantro/src/pages/CookbookView.tsx",[],"/home/evan/src/cilantro/src/pages/SettingsView.tsx",[],["44","45"],"/home/evan/src/cilantro/src/pages/SearchView.tsx",[],"/home/evan/src/cilantro/src/Settings.ts",[],"/home/evan/src/cilantro/src/components/Sidebar.tsx",[],"/home/evan/src/cilantro/src/pages/TagsView.tsx",[],{"ruleId":"46","replacedBy":"47"},{"ruleId":"48","replacedBy":"49"},{"ruleId":"50","severity":1,"message":"51","line":102,"column":6,"nodeType":"52","endLine":102,"endColumn":8,"suggestions":"53"},{"ruleId":"46","replacedBy":"54"},{"ruleId":"48","replacedBy":"55"},"no-native-reassign",["56"],"no-negated-in-lhs",["57"],"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'settings.dataRootURL' and 'settings.indexFile'. Either include them or remove the dependency array.","ArrayExpression",["58"],["56"],["57"],"no-global-assign","no-unsafe-negation",{"desc":"59","fix":"60"},"Update the dependencies array to be: [settings.dataRootURL, settings.indexFile]",{"range":"61","text":"62"},[2871,2873],"[settings.dataRootURL, settings.indexFile]"]